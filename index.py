from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, 
    ContextTypes, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    InlineQueryHandler, 
    CallbackContext, 
    CallbackQueryHandler,
    ConversationHandler
)
from telegram.constants import ParseMode

from config.config import TOKEN, logger
from config.functions import make_buttons, keyboard
from config.list import main_menu, first_button, gender_list
from config.converstation import *
from config.db import db

import os



application = ApplicationBuilder().token(TOKEN).build()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    if update.message.chat.type != 'private':
        return

    all_ids = db.get_all_user_ids()
    first_name = update.effective_user.first_name

    if update.effective_user.id not in all_ids:

        return await context.bot.send_message(chat_id=update.effective_chat.id, 
                                    text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{first_name}</b> üëã\n'
                                    '–ß–µ—Ä–µ–∑ –¥–∞–Ω–Ω—ã–π –±–æ—Ç –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –≤ –õ–ü–£', 
                                    parse_mode=ParseMode.HTML,
                                    reply_markup=await make_buttons(first_button))
    
    return await context.bot.send_message(chat_id=update.effective_chat.id, 
                                text=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{first_name}</b> üëã\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üóÇ', 
                                parse_mode=ParseMode.HTML,
                                reply_markup=await make_buttons(main_menu))


async def callback_handler(update: Update, context: CallbackContext):

    if update.effective_chat.type != 'private':
        return

    callback_data = update.callback_query.data
    call = update.callback_query
    user_id = update.effective_user.id
    all_ids = db.get_all_user_ids()

    if callback_data == 'main-menu':
        if user_id not in all_ids:

            return await context.bot.send_message(chat_id=update.effective_chat.id, 
                                        text='–ß–µ—Ä–µ–∑ –¥–∞–Ω–Ω—ã–π –±–æ—Ç –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –≤ –õ–ü–£\n'
                                        '‚ùóÔ∏è–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚ùóÔ∏è', 
                                        parse_mode=ParseMode.HTML,
                                        reply_markup=await make_buttons(first_button))
        await context.bot.edit_message_text(chat_id=update.effective_chat.id, 
                                            message_id=call.message.message_id,
                                text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üóÇ', 
                                reply_markup=await make_buttons(main_menu))

    elif callback_data == 'about':
        await context.bot.edit_message_text(chat_id=update.effective_chat.id, 
                                            message_id=call.message.message_id,
                                text='üìë –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ', 
                                    parse_mode=ParseMode.HTML,
                                reply_markup=await make_buttons([('–ù–∞–∑–∞–¥ ‚Ü™Ô∏è', 'main-menu')]))


    ###################### profile ######################    
    elif callback_data == 'my_cabinet':
        button = [
            ('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å üñç', 'edit-prof'),
            ('', '#'),
            ('', '#'),
            ('–ù–∞–∑–∞–¥ ‚Ü™Ô∏è', 'main-menu'),
        ]
        result = db.get_user_by_id(user_id)
        print(f'{result=}')
        await context.bot.edit_message_text(chat_id=update.effective_chat.id, 
                                            message_id=call.message.message_id,
                                text='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ü™™\n\n'
                                f'üî∏ –§–∞–º–∏–ª–∏—è: <b>{result[4]}</b>\n'
                                f'üî∏ –ò–º—è:  <b>{result[3]}</b>\n'
                                f'üî∏ –û—Ç—á–µ—Å—Ç–≤–æ: <b>{result[5]}</b>\n\n'
                                f'üî∏ –ü–æ–ª: <b>{gender_list[result[10]]}</b>'
                                f'üîπ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: <b>{result[6]}</b>\n'
                                f'üîπ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{result[7]}</b>\n\n'
                                f'üî∫ –î–ú–°: <b>{result[9]}</b>\n'
                                f'üî∫ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π: <b>{result[8]}</b>\n\n'
                                f'–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>{result[11]}</b>', 
                                    parse_mode=ParseMode.HTML,
                                reply_markup=await make_buttons(button))
    

    elif callback_data == 'edit-prof':
        button = [
            ('–§–∞–º–∏–ª–∏—é', 'edit--last-name'),
            ('', '#'),
            ('', '#'),
            ('–ò–º—è', 'edit--first-name'),
            ('', '#'),
            ('', '#'),
            ('–û—Ç—á–µ—Å—Ç–≤–æ', 'edit--father-name'),
            ('', '#'),
            ('', '#'),
            ('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'edit--phone'),
            ('', '#'),
            ('', '#'),
            ('–ù–æ–º–µ—Ä –î–ú–°', 'edit--insurence'),
            ('', '#'),
            ('', '#'),
            ('–ü–æ–ª', 'edit--gender'),
            ('', '#'),
            ('', '#'),
            ('–ù–∞–∑–∞–¥ ‚Ü™Ô∏è', 'my_cabinet'),
        ]

        await context.bot.edit_message_text(chat_id=update.effective_chat.id, 
                                            message_id=call.message.message_id,
                                text='–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? üñç', 
                                reply_markup=await make_buttons(button))
        
    elif callback_data == 'my_records':
        await context.bot.edit_message_text(chat_id=update.effective_chat.id, 
                                            message_id=call.message.message_id,
                                text='üìÜ –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞', 
                                reply_markup=await make_buttons([('–ù–∞–∑–∞–¥ ‚Ü™Ô∏è', 'main-menu')]))
        
    elif callback_data == 'another-ininsurence':
        await context.bot.edit_message_text(chat_id=update.effective_chat.id, 
                                            message_id=call.message.message_id,
                                text='üìù –ù—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞, '
                                '–∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å, –∫—É–¥–∞ –∏—Ö –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏ —Ç–¥', 
                                reply_markup=await make_buttons([('–ù–∞–∑–∞–¥ ‚Ü™Ô∏è', 'main-menu')]))
    
    elif callback_data == 'start_record':
        await context.bot.edit_message_text(chat_id=update.effective_chat.id, 
                                            message_id=call.message.message_id,
                                text='‚òéÔ∏è –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ê–ü–ò', 
                                reply_markup=await make_buttons([('–ù–∞–∑–∞–¥ ‚Ü™Ô∏è', 'main-menu')]))
    ###################### registration ######################
    elif callback_data == 'rulse_agree':
        logger.info('rulse_agree')
        button = [
            ('–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É ‚úÖ', 'starts'),
            ('', '#'),
            ('', '#'),
            ('–ù–µ –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ ‚ùå', 'not_agree'),
        ]
        logger.info('message')
        await context.bot.send_message(chat_id=update.effective_chat.id, 
                                    text='C–µ–π—á–∞—Å –±—É–¥–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –í–∞—Å!\n–ü—Ä–æ—Å–∏–º –≤–Ω–µ—Å—Ç–∏ '
                                    '–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã '
                                    '–Ω–∞–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∫–ª–∏–Ω–∏–∫—É\n\n‚ùóÔ∏è–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ '
                                    '–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö‚ùóÔ∏è', 
                                reply_markup=await make_buttons(button))
    
    elif callback_data == 'not_agree':
        await context.bot.edit_message_text(chat_id=update.effective_chat.id, 
                                    message_id=call.message.message_id, 
                                    text='–í—ã –Ω–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n'
                                    '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞', 
                                reply_markup=await make_buttons(first_button))
    else:
        logger.error(f'{callback_data=}')




def main():
    start_handler = CommandHandler('start', start)

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(first_step , pattern='^starts$')],
        states={
            FIRST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, second_step)],
            LAST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, third_step)],
            FATHER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, fourth_step)],
            DATA_BIRTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, fourth_new_step)],
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, fourth_new2_step)],
            PHONE_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, fifth_step)],
            INSURANCE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, fifth_new_step)],
            INSURANCE_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, six_step)],
            RANGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, final_functions)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    conv_handler_edit = ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_profile, pattern='^edit--')],
        states={
            EDIT_PROFILE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_profile2)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    conv_handler_make_record = ConversationHandler(
        entry_points=[CallbackQueryHandler(make_record, pattern='^start_record$')],
        states={
            CLINIC_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, make_record2)],
            DOC_SPEC: [MessageHandler(filters.TEXT & ~filters.COMMAND, make_record3)],
            DATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, make_record4)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    call_back_query = CallbackQueryHandler(callback_handler)

    
    application.add_handler(start_handler)
    application.add_handler(conv_handler)
    application.add_handler(conv_handler_edit)
    application.add_handler(conv_handler_make_record)
    application.add_handler(call_back_query)

    application.run_polling()

if __name__ == '__main__':
    main()